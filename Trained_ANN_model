# earthquake_prediction.py
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import joblib
import plotly.express as px

# Load dataset
df = pd.read_csv('Eartquakes-1990-2023.csv')

# Drop irrelevant columns
columns_to_drop = ['magType', 'nst', 'gap', 'dmin', 'rms', 'updated', 'place', 'type', 
                  'horizontalError', 'depthError', 'magError', 'magNst', 'status', 
                  'locationSource', 'magSource']
df = df.drop(columns=columns_to_drop)
df = df.dropna()

# Extract time features
df['time'] = pd.to_datetime(df['time'])
df['year'] = df['time'].dt.year.astype('int16')
df['month'] = df['time'].dt.month.astype('int8')
df['day'] = df['time'].dt.day.astype('int8')
df['hour'] = df['time'].dt.hour.astype('int8')
df = df.drop(columns=['time'])

# Optimize data types
df['latitude'] = df['latitude'].astype('float32')
df['longitude'] = df['longitude'].astype('float32')
df['depth'] = df['depth'].astype('float32')
df['mag'] = df['mag'].astype('float32')

# Features and Target
features = df[['latitude', 'longitude', 'depth', 'year', 'month', 'day', 'hour']]
target = df['mag']

# Scale features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.2, random_state=42)

# Build and train ANN
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='linear'))
model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])
model.fit(X_train, y_train, epochs=50, batch_size=128, validation_split=0.2, verbose=1)

# Evaluate model
loss, mae = model.evaluate(X_test, y_test, verbose=0)
print(f"Test Mean Absolute Error: {mae:.2f}")

# Save model and scaler
model.save('earthquake_magnitude_model.h5')
joblib.dump(scaler, 'scaler.pkl')

# Visualization
df_test = pd.DataFrame(X_test, columns=features.columns)
df_test['actual_mag'] = y_test
df_test['predicted_mag'] = model.predict(X_test).flatten()

# Handle NaN and negative values
df_test = df_test.dropna(subset=['actual_mag', 'predicted_mag'])
df_test['actual_mag'] = df_test['actual_mag'].clip(lower=0)

# Plot on a geographical map
fig = px.scatter_geo(df_test, lat='latitude', lon='longitude', size='actual_mag', 
                     color='predicted_mag', title='Actual vs Predicted Magnitudes',
                     hover_data=['depth'])
fig.show()
